#include "../cotl"

namespace cotlstd {

// arg: self, caller, lib, tunnel

_COTL_FUNC_T(std???)
_COTL_FUNC_BEGIN
    if (auto self_p = self.as<cotl::???>) {
        if (tunnel) {
            //
        } else {
            //
        }
    } else {
        throw "bad self type";
    }
_COTL_FUNC_END

namespace {

_COTL_FUNC_T(init)
_COTL_FUNC_BEGIN
    if (tunnel) {
        throw "bad tunnel";
    } else {
        PMaybe tunnel1(
            _atom(id_???),
            _ptr(_libmap(
                id_???, _libfunc(std???),
            ), id_quote)
        );

        lib.call<false>(_atom(id_???), nullptr, tunnel1);
    }
_COTL_FUNC_END

long long ago = addInitializer(init, init_???);

}

}
